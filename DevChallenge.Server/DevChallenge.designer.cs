#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevChallenge.Server.db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="devchallenge")]
	public partial class DevChallengeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgentRecord(AgentRecord instance);
    partial void UpdateAgentRecord(AgentRecord instance);
    partial void DeleteAgentRecord(AgentRecord instance);
    partial void InsertInstance(Instance instance);
    partial void UpdateInstance(Instance instance);
    partial void DeleteInstance(Instance instance);
    partial void InsertScenario(Scenario instance);
    partial void UpdateScenario(Scenario instance);
    partial void DeleteScenario(Scenario instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DevChallengeDataContext() : 
				base(global::DevChallenge.Server.Properties.Settings.Default.devchallengeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DevChallengeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DevChallengeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DevChallengeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DevChallengeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgentRecord> AgentRecords
		{
			get
			{
				return this.GetTable<AgentRecord>();
			}
		}
		
		public System.Data.Linq.Table<Instance> Instances
		{
			get
			{
				return this.GetTable<Instance>();
			}
		}
		
		public System.Data.Linq.Table<Scenario> Scenarios
		{
			get
			{
				return this.GetTable<Scenario>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AgentRecord")]
	public partial class AgentRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _InstanceId;
		
		private string _Name;
		
		private int _Revision;
		
		private int _UserId;
		
		private System.Nullable<int> _Score;
		
		private EntityRef<Instance> _Instance;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInstanceIdChanging(int value);
    partial void OnInstanceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRevisionChanging(int value);
    partial void OnRevisionChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    #endregion
		
		public AgentRecord()
		{
			this._Instance = default(EntityRef<Instance>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstanceId", DbType="Int NOT NULL")]
		public int InstanceId
		{
			get
			{
				return this._InstanceId;
			}
			set
			{
				if ((this._InstanceId != value))
				{
					if (this._Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._InstanceId = value;
					this.SendPropertyChanged("InstanceId");
					this.OnInstanceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revision", DbType="Int NOT NULL")]
		public int Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instance_AgentRecord", Storage="_Instance", ThisKey="InstanceId", OtherKey="Id", IsForeignKey=true)]
		public Instance Instance
		{
			get
			{
				return this._Instance.Entity;
			}
			set
			{
				Instance previousValue = this._Instance.Entity;
				if (((previousValue != value) 
							|| (this._Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instance.Entity = null;
						previousValue.AgentRecords.Remove(this);
					}
					this._Instance.Entity = value;
					if ((value != null))
					{
						value.AgentRecords.Add(this);
						this._InstanceId = value.Id;
					}
					else
					{
						this._InstanceId = default(int);
					}
					this.SendPropertyChanged("Instance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AgentRecord", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AgentRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AgentRecords.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Instance")]
	public partial class Instance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ScenarioId;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Finished;
		
		private string _Data;
		
		private EntitySet<AgentRecord> _AgentRecords;
		
		private EntityRef<Scenario> _Scenario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnScenarioIdChanging(int value);
    partial void OnScenarioIdChanged();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public Instance()
		{
			this._AgentRecords = new EntitySet<AgentRecord>(new Action<AgentRecord>(this.attach_AgentRecords), new Action<AgentRecord>(this.detach_AgentRecords));
			this._Scenario = default(EntityRef<Scenario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioId", DbType="Int NOT NULL")]
		public int ScenarioId
		{
			get
			{
				return this._ScenarioId;
			}
			set
			{
				if ((this._ScenarioId != value))
				{
					if (this._Scenario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScenarioIdChanging(value);
					this.SendPropertyChanging();
					this._ScenarioId = value;
					this.SendPropertyChanged("ScenarioId");
					this.OnScenarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Started", DbType="DateTime")]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finished", DbType="DateTime")]
		public System.Nullable<System.DateTime> Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this.OnFinishedChanging(value);
					this.SendPropertyChanging();
					this._Finished = value;
					this.SendPropertyChanged("Finished");
					this.OnFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instance_AgentRecord", Storage="_AgentRecords", ThisKey="Id", OtherKey="InstanceId")]
		public EntitySet<AgentRecord> AgentRecords
		{
			get
			{
				return this._AgentRecords;
			}
			set
			{
				this._AgentRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_Instance", Storage="_Scenario", ThisKey="ScenarioId", OtherKey="Id", IsForeignKey=true)]
		public Scenario Scenario
		{
			get
			{
				return this._Scenario.Entity;
			}
			set
			{
				Scenario previousValue = this._Scenario.Entity;
				if (((previousValue != value) 
							|| (this._Scenario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scenario.Entity = null;
						previousValue.Instances.Remove(this);
					}
					this._Scenario.Entity = value;
					if ((value != null))
					{
						value.Instances.Add(this);
						this._ScenarioId = value.Id;
					}
					else
					{
						this._ScenarioId = default(int);
					}
					this.SendPropertyChanged("Scenario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgentRecords(AgentRecord entity)
		{
			this.SendPropertyChanging();
			entity.Instance = this;
		}
		
		private void detach_AgentRecords(AgentRecord entity)
		{
			this.SendPropertyChanging();
			entity.Instance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Scenario")]
	public partial class Scenario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _Code;
		
		private EntitySet<Instance> _Instances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Scenario()
		{
			this._Instances = new EntitySet<Instance>(new Action<Instance>(this.attach_Instances), new Action<Instance>(this.detach_Instances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_Instance", Storage="_Instances", ThisKey="Id", OtherKey="ScenarioId")]
		public EntitySet<Instance> Instances
		{
			get
			{
				return this._Instances;
			}
			set
			{
				this._Instances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = this;
		}
		
		private void detach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _PwDigest;
		
		private string _Salt;
		
		private string _FullName;
		
		private string _Email;
		
		private EntitySet<AgentRecord> _AgentRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPwDigestChanging(string value);
    partial void OnPwDigestChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._AgentRecords = new EntitySet<AgentRecord>(new Action<AgentRecord>(this.attach_AgentRecords), new Action<AgentRecord>(this.detach_AgentRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PwDigest", DbType="NVarChar(1024)")]
		public string PwDigest
		{
			get
			{
				return this._PwDigest;
			}
			set
			{
				if ((this._PwDigest != value))
				{
					this.OnPwDigestChanging(value);
					this.SendPropertyChanging();
					this._PwDigest = value;
					this.SendPropertyChanged("PwDigest");
					this.OnPwDigestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="NVarChar(1024)")]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(256)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AgentRecord", Storage="_AgentRecords", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AgentRecord> AgentRecords
		{
			get
			{
				return this._AgentRecords;
			}
			set
			{
				this._AgentRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgentRecords(AgentRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AgentRecords(AgentRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
