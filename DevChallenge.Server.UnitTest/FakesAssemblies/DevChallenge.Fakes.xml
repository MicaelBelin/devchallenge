<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevChallenge.Fakes</name>
    </assembly>
    <members>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract">
            <summary>Shim type of DevChallenge.Connection.Abstract</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.#ctor(DevChallenge.Connection.Abstract)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.Bind(DevChallenge.IConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.Constructor">
            <summary>Sets the shim of Abstract.Abstract()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.CreateNotificationXElement">
            <summary>Sets the shim of Abstract.CreateNotification(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.CreateRequestXElement">
            <summary>Sets the shim of Abstract.CreateRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.CreateResponseXElementString">
            <summary>Sets the shim of Abstract.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.DispatchMessageXElement">
            <summary>Sets the shim of Abstract.DispatchMessage(XElement msg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.Dispose">
            <summary>Sets the shim of Abstract.Dispose()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.Exec">
            <summary>Sets the shim of Abstract.Exec()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ExecTimeSpan">
            <summary>Sets the shim of Abstract.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ExecWhileFuncOfBoolean">
            <summary>Sets the shim of Abstract.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the shim of Abstract.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.GetNotificationXElement">
            <summary>Sets the shim of Abstract.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.GetRequestXElement">
            <summary>Sets the shim of Abstract.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.GetResponseXElement">
            <summary>Sets the shim of Abstract.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.PostRequestXElement">
            <summary>Sets the shim of Abstract.PostRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.RegisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Abstract.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.RunUntilClosed">
            <summary>Sets the shim of Abstract.RunUntilClosed()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.SendNotificationXElement">
            <summary>Sets the shim of Abstract.SendNotification(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.SendRequestXElement">
            <summary>Sets the shim of Abstract.SendRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.SendRequestXElementTimeSpan">
            <summary>Sets the shim of Abstract.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.SendResponseXElementString">
            <summary>Sets the shim of Abstract.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.SendXElement">
            <summary>Sets the shim of Abstract.Send(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.StartCollector">
            <summary>Sets the shim of Abstract.StartCollector()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.UnregisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Abstract.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitForNotificationFuncOfINotificationFilterResponse">
            <summary>Sets the shim of Abstract.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitForNotificationFuncOfINotificationFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitForRequestFuncOfIRequestFilterResponse">
            <summary>Sets the shim of Abstract.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitForRequestFuncOfIRequestFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitUntilEventWaitHandle">
            <summary>Sets the shim of Abstract.WaitUntil(EventWaitHandle handle)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitUntilEventWaitHandleTimeSpan">
            <summary>Sets the shim of Abstract.WaitUntil(EventWaitHandle handle, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitUntilFilterMatchFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.WaitUntilFilterMatch(Func`2&lt;XElement,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.WaitUntilFilterMatchFuncOfXElementFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitUntilFilterMatch(Func`2&lt;XElement,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.CreateNotificationXElement">
            <summary>Sets the shim of Abstract.CreateNotification(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.CreateRequestXElement">
            <summary>Sets the shim of Abstract.CreateRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.CreateResponseXElementString">
            <summary>Sets the shim of Abstract.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.DispatchMessageXElement">
            <summary>Sets the shim of Abstract.DispatchMessage(XElement msg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.Dispose">
            <summary>Sets the shim of Abstract.Dispose()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.Exec">
            <summary>Sets the shim of Abstract.Exec()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.ExecTimeSpan">
            <summary>Sets the shim of Abstract.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.ExecWhileFuncOfBoolean">
            <summary>Sets the shim of Abstract.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the shim of Abstract.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.GetNotificationXElement">
            <summary>Sets the shim of Abstract.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.GetRequestXElement">
            <summary>Sets the shim of Abstract.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.GetResponseXElement">
            <summary>Sets the shim of Abstract.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.PostRequestXElement">
            <summary>Sets the shim of Abstract.PostRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.RegisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Abstract.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.RunUntilClosed">
            <summary>Sets the shim of Abstract.RunUntilClosed()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.SendNotificationXElement">
            <summary>Sets the shim of Abstract.SendNotification(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.SendRequestXElement">
            <summary>Sets the shim of Abstract.SendRequest(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.SendRequestXElementTimeSpan">
            <summary>Sets the shim of Abstract.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.SendResponseXElementString">
            <summary>Sets the shim of Abstract.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.SendXElement">
            <summary>Sets the shim of Abstract.Send(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.StartCollector">
            <summary>Sets the shim of Abstract.StartCollector()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.UnregisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Abstract.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitForNotificationFuncOfINotificationFilterResponse">
            <summary>Sets the shim of Abstract.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitForNotificationFuncOfINotificationFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitForRequestFuncOfIRequestFilterResponse">
            <summary>Sets the shim of Abstract.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitForRequestFuncOfIRequestFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitUntilEventWaitHandle">
            <summary>Sets the shim of Abstract.WaitUntil(EventWaitHandle handle)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitUntilEventWaitHandleTimeSpan">
            <summary>Sets the shim of Abstract.WaitUntil(EventWaitHandle handle, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitUntilFilterMatchFuncOfXElementFilterResponse">
            <summary>Sets the shim of Abstract.WaitUntilFilterMatch(Func`2&lt;XElement,FilterResponse&gt; filter)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.AllInstances.WaitUntilFilterMatchFuncOfXElementFilterResponseTimeSpan">
            <summary>Sets the shim of Abstract.WaitUntilFilterMatch(Func`2&lt;XElement,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector">
            <summary>Shim type of DevChallenge.Connection.Abstract+Collector</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.#ctor(DevChallenge.Connection.Abstract.Collector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.Bind(DevChallenge.Connection.Abstract.IRunLoopSource)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.CollectorTaskGet">
            <summary>Sets the shim of Collector.get_CollectorTask()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.CollectorTaskSetTask">
            <summary>Sets the shim of Collector.set_CollectorTask(Task value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.ConstructorFuncOfIEnumerableOfXElement">
            <summary>Sets the shim of Collector.Collector(Func`1&lt;IEnumerable`1&lt;XElement&gt;&gt; itempoolfunc)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.GetItem">
            <summary>Sets the shim of Collector.GetItem()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.GetItemTimeSpan">
            <summary>Sets the shim of Collector.GetItem(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.HasAvailableItemGet">
            <summary>Sets the shim of Collector.get_HasAvailableItem()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.IsRunningGet">
            <summary>Sets the shim of Collector.get_IsRunning()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.Start">
            <summary>Sets the shim of Collector.Start()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector._Startb__21">
            <summary>Sets the shim of Collector.&lt;Start&gt;b__21()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.CollectorTaskGet">
            <summary>Sets the shim of Collector.get_CollectorTask()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.CollectorTaskSetTask">
            <summary>Sets the shim of Collector.set_CollectorTask(Task value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.GetItem">
            <summary>Sets the shim of Collector.GetItem()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.GetItemTimeSpan">
            <summary>Sets the shim of Collector.GetItem(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.HasAvailableItemGet">
            <summary>Sets the shim of Collector.get_HasAvailableItem()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.IsRunningGet">
            <summary>Sets the shim of Collector.get_IsRunning()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances.Start">
            <summary>Sets the shim of Collector.Start()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimCollector.AllInstances._Startb__21">
            <summary>Sets the shim of Collector.&lt;Start&gt;b__21()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification">
            <summary>Shim type of DevChallenge.Connection.Abstract+Notification</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.#ctor(DevChallenge.Connection.Abstract.Notification)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.Bind(DevChallenge.INotification)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.ConstructorXElement">
            <summary>Sets the shim of Notification.Notification(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.GetXElement">
            <summary>Sets the shim of Notification.Get(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.MessageGet">
            <summary>Sets the shim of Notification.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.MessageSetXElement">
            <summary>Sets the shim of Notification.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.SerializedGet">
            <summary>Sets the shim of Notification.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.AllInstances.MessageGet">
            <summary>Sets the shim of Notification.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.AllInstances.MessageSetXElement">
            <summary>Sets the shim of Notification.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimNotification.AllInstances.SerializedGet">
            <summary>Sets the shim of Notification.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest">
            <summary>Shim type of DevChallenge.Connection.Abstract+Request</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.#ctor(DevChallenge.Connection.Abstract.Request)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.Bind(DevChallenge.IRequest)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.ConstructorXElement">
            <summary>Sets the shim of Request.Request(XElement message)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.ConstructorXElementString">
            <summary>Sets the shim of Request.Request(XElement message, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.GetXElement">
            <summary>Sets the shim of Request.Get(XElement serialized)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.MessageGet">
            <summary>Sets the shim of Request.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.MessageSetXElement">
            <summary>Sets the shim of Request.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.NextRequestId">
            <summary>Sets the shim of Request.NextRequestId()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.RequestIdGet">
            <summary>Sets the shim of Request.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.RequestIdSetString">
            <summary>Sets the shim of Request.set_RequestId(String value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.SerializedGet">
            <summary>Sets the shim of Request.get_Serialized()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.StaticConstructor">
            <summary>Sets the shim of Request.Request()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances.MessageGet">
            <summary>Sets the shim of Request.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances.MessageSetXElement">
            <summary>Sets the shim of Request.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances.RequestIdGet">
            <summary>Sets the shim of Request.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances.RequestIdSetString">
            <summary>Sets the shim of Request.set_RequestId(String value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRequest.AllInstances.SerializedGet">
            <summary>Sets the shim of Request.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse">
            <summary>Shim type of DevChallenge.Connection.Abstract+Response</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.#ctor(DevChallenge.Connection.Abstract.Response)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.Bind(DevChallenge.IResponse)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.ConstructorXElementString">
            <summary>Sets the shim of Response.Response(XElement message, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.GetXElement">
            <summary>Sets the shim of Response.Get(XElement serialized)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.GetXElementString">
            <summary>Sets the shim of Response.Get(XElement serialized, String requestid)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.MessageGet">
            <summary>Sets the shim of Response.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.MessageSetXElement">
            <summary>Sets the shim of Response.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.RequestIdGet">
            <summary>Sets the shim of Response.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.RequestIdSetString">
            <summary>Sets the shim of Response.set_RequestId(String value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.SerializedGet">
            <summary>Sets the shim of Response.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances.MessageGet">
            <summary>Sets the shim of Response.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances.MessageSetXElement">
            <summary>Sets the shim of Response.set_Message(XElement value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances.RequestIdGet">
            <summary>Sets the shim of Response.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances.RequestIdSetString">
            <summary>Sets the shim of Response.set_RequestId(String value)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimResponse.AllInstances.SerializedGet">
            <summary>Sets the shim of Response.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop">
            <summary>Shim type of DevChallenge.Connection.Abstract+RunLoop</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.#ctor(DevChallenge.Connection.Abstract.RunLoop)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.ConstructorAbstractIRunLoopSourceActionOfXElement">
            <summary>Sets the shim of RunLoop.RunLoop(IRunLoopSource source, Action`1&lt;XElement&gt; onnewitem)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.Exec">
            <summary>Sets the shim of RunLoop.Exec()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.ExecThreadGet">
            <summary>Sets the shim of RunLoop.get_ExecThread()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.ExecTimeSpan">
            <summary>Sets the shim of RunLoop.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.ExecWhileFuncOfBoolean">
            <summary>Sets the shim of RunLoop.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the shim of RunLoop.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop._Execb__23">
            <summary>Sets the shim of RunLoop.&lt;Exec&gt;b__23()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances.Exec">
            <summary>Sets the shim of RunLoop.Exec()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances.ExecThreadGet">
            <summary>Sets the shim of RunLoop.get_ExecThread()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances.ExecTimeSpan">
            <summary>Sets the shim of RunLoop.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances.ExecWhileFuncOfBoolean">
            <summary>Sets the shim of RunLoop.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimAbstract.ShimRunLoop.AllInstances.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the shim of RunLoop.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimTcp">
            <summary>Shim type of DevChallenge.Connection.Tcp</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.#ctor(DevChallenge.Connection.Tcp)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.Bind(DevChallenge.IConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.Bind(DevChallenge.ITcpConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.ShimTcp.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.Close">
            <summary>Sets the shim of Tcp.Close()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.ConstructorTcpClient">
            <summary>Sets the shim of Tcp.Tcp(TcpClient c)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.ReadXmlItems">
            <summary>Sets the shim of Tcp.ReadXmlItems()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.SendXmlItemXElement">
            <summary>Sets the shim of Tcp.SendXmlItem(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.TcpClientGet">
            <summary>Sets the shim of Tcp.get_TcpClient()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.ShimTcp.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.AllInstances.Close">
            <summary>Sets the shim of Tcp.Close()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.AllInstances.ReadXmlItems">
            <summary>Sets the shim of Tcp.ReadXmlItems()</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.AllInstances.SendXmlItemXElement">
            <summary>Sets the shim of Tcp.SendXmlItem(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.ShimTcp.AllInstances.TcpClientGet">
            <summary>Sets the shim of Tcp.get_TcpClient()</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.StubAbstract">
            <summary>Stub type of DevChallenge.Connection.Abstract</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubAbstract.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubAbstract.Close">
            <summary>Sets the stub of Abstract.Close()</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubAbstract.Close01">
            <summary>Sets the stub of Abstract.Close()</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubAbstract.InitializeStub">
            <summary>Initializes a new instance of type StubAbstract</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubAbstract.ReadXmlItems">
            <summary>Sets the stub of Abstract.ReadXmlItems()</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubAbstract.ReadXmlItems01">
            <summary>Sets the stub of Abstract.ReadXmlItems()</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubAbstract.SendXmlItem(System.Xml.Linq.XElement)">
            <summary>Sets the stub of Abstract.SendXmlItem(XElement e)</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubAbstract.SendXmlItemXElement">
            <summary>Sets the stub of Abstract.SendXmlItem(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubAbstract.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubAbstract.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubAbstract.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:DevChallenge.Connection.Fakes.StubTcp">
            <summary>Stub type of DevChallenge.Connection.Tcp</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubTcp.#ctor(System.Net.Sockets.TcpClient)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubTcp.Close">
            <summary>Sets the stub of Tcp.Close()</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubTcp.Close01">
            <summary>Sets the stub of Tcp.Close()</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubTcp.InitializeStub">
            <summary>Initializes a new instance of type StubTcp</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubTcp.ReadXmlItems">
            <summary>Sets the stub of Tcp.ReadXmlItems()</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubTcp.ReadXmlItems01">
            <summary>Sets the stub of Tcp.ReadXmlItems()</summary>
        </member>
        <member name="M:DevChallenge.Connection.Fakes.StubTcp.SendXmlItem(System.Xml.Linq.XElement)">
            <summary>Sets the stub of Tcp.SendXmlItem(XElement e)</summary>
        </member>
        <member name="F:DevChallenge.Connection.Fakes.StubTcp.SendXmlItemXElement">
            <summary>Sets the stub of Tcp.SendXmlItem(XElement e)</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubTcp.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubTcp.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Connection.Fakes.StubTcp.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:DevChallenge.ConnectionInterface.Fakes.ShimLobby">
            <summary>Shim type of DevChallenge.ConnectionInterface.Lobby</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.ShimLobby.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.ShimLobby.#ctor(DevChallenge.ConnectionInterface.Lobby)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.ShimLobby.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.ShimLobby.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.ConstructorIConnection">
            <summary>Sets the shim of Lobby.Lobby(IConnection connection)</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.HasScenariosGet">
            <summary>Sets the shim of Lobby.get_HasScenarios()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.JoinString">
            <summary>Sets the shim of Lobby.Join(String scenarioname)</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.ScenariosGet">
            <summary>Sets the shim of Lobby.get_Scenarios()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby._Joinb__7">
            <summary>Sets the shim of Lobby.&lt;Join&gt;b__7()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby._get_Scenariosb__6">
            <summary>Sets the shim of Lobby.&lt;get_Scenarios&gt;b__6()</summary>
        </member>
        <member name="T:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances.HasScenariosGet">
            <summary>Sets the shim of Lobby.get_HasScenarios()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances.JoinString">
            <summary>Sets the shim of Lobby.Join(String scenarioname)</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances.ScenariosGet">
            <summary>Sets the shim of Lobby.get_Scenarios()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances._Joinb__7">
            <summary>Sets the shim of Lobby.&lt;Join&gt;b__7()</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.ShimLobby.AllInstances._get_Scenariosb__6">
            <summary>Sets the shim of Lobby.&lt;get_Scenarios&gt;b__6()</summary>
        </member>
        <member name="T:DevChallenge.ConnectionInterface.Fakes.StubLobby">
            <summary>Stub type of DevChallenge.ConnectionInterface.Lobby</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.StubLobby.#ctor(DevChallenge.IConnection)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.ConnectionInterface.Fakes.StubLobby.InitializeStub">
            <summary>Initializes a new instance of type StubLobby</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.StubLobby.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.StubLobby.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.ConnectionInterface.Fakes.StubLobby.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient">
            <summary>Shim type of DevChallenge.Client</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.#ctor(DevChallenge.Client)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.Bind(DevChallenge.IClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ApplyMonitorsIConnection">
            <summary>Sets the shim of Client.ApplyMonitors(IConnection conn)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ConstructorStringInt32">
            <summary>Sets the shim of Client.Client(String servername, Int32 port)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.LoginStringStringStringInt32">
            <summary>Sets the shim of Client.Login(String username, String password, String agentname, Int32 agentrevision)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Client.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.RegisterUserStringStringStringString">
            <summary>Sets the shim of Client.RegisterUser(String username, String password, String fullname, String email)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ServerNameGet">
            <summary>Sets the shim of Client.get_ServerName()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ServerNameSetString">
            <summary>Sets the shim of Client.set_ServerName(String value)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ServerPortGet">
            <summary>Sets the shim of Client.get_ServerPort()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ServerPortSetInt32">
            <summary>Sets the shim of Client.set_ServerPort(Int32 value)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.StaticConstructor">
            <summary>Sets the shim of Client.Client()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Client.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient._Loginb__0INotification">
            <summary>Sets the shim of Client.&lt;Login&gt;b__0(INotification notification)</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.ApplyMonitorsIConnection">
            <summary>Sets the shim of Client.ApplyMonitors(IConnection conn)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.LoginStringStringStringInt32">
            <summary>Sets the shim of Client.Login(String username, String password, String agentname, Int32 agentrevision)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Client.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.RegisterUserStringStringStringString">
            <summary>Sets the shim of Client.RegisterUser(String username, String password, String fullname, String email)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.ServerNameGet">
            <summary>Sets the shim of Client.get_ServerName()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.ServerNameSetString">
            <summary>Sets the shim of Client.set_ServerName(String value)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.ServerPortGet">
            <summary>Sets the shim of Client.get_ServerPort()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.ServerPortSetInt32">
            <summary>Sets the shim of Client.set_ServerPort(Int32 value)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.AllInstances.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the shim of Client.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimLoginException">
            <summary>Shim type of DevChallenge.Client+LoginException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimLoginException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimLoginException.#ctor(DevChallenge.Client.LoginException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimLoginException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimLoginException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimLoginException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimLoginException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimLoginException.ConstructorString">
            <summary>Sets the shim of LoginException.LoginException(String msg)</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimLoginException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimRegisterUserException">
            <summary>Shim type of DevChallenge.Client+RegisterUserException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.#ctor(DevChallenge.Client.RegisterUserException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.ConstructorString">
            <summary>Sets the shim of RegisterUserException.RegisterUserException(String msg)</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimRegisterUserException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException">
            <summary>Shim type of DevChallenge.Client+UninitializedClientException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.#ctor(DevChallenge.Client.UninitializedClientException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.Constructor">
            <summary>Sets the shim of UninitializedClientException.UninitializedClientException()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClient.ShimUninitializedClientException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClosedException">
            <summary>Shim type of DevChallenge.ClosedException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClosedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClosedException.#ctor(DevChallenge.ClosedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClosedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClosedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimClosedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClosedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClosedException.Constructor">
            <summary>Sets the shim of ClosedException.ClosedException()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClosedException.ConstructorException">
            <summary>Sets the shim of ClosedException.ClosedException(Exception inner)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimClosedException.StaticConstructor">
            <summary>Sets the shim of ClosedException.ClosedException()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimClosedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimInvalidMessageTypeException">
            <summary>Shim type of DevChallenge.InvalidMessageTypeException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimInvalidMessageTypeException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimInvalidMessageTypeException.#ctor(DevChallenge.InvalidMessageTypeException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimInvalidMessageTypeException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimInvalidMessageTypeException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Fakes.ShimInvalidMessageTypeException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimInvalidMessageTypeException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Fakes.ShimInvalidMessageTypeException.Constructor">
            <summary>Sets the shim of InvalidMessageTypeException.InvalidMessageTypeException()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.ShimInvalidMessageTypeException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubClient">
            <summary>Stub type of DevChallenge.Client</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClient.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClient.InitializeStub">
            <summary>Initializes a new instance of type StubClient</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClient.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClient.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClient.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubClosedException">
            <summary>Stub type of DevChallenge.ClosedException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubClosedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubClosedException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.InitializeStub">
            <summary>Initializes a new instance of type StubClosedException</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubClosedException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubClosedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubClosedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubIClient">
            <summary>Stub type of DevChallenge.IClient</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIClient.#ctor">
            <summary>Initializes a new instance of type StubIClient</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#Login(System.String,System.String,System.String,System.Int32)">
            <summary>Sets the stub of IClient.Login(String username, String password, String agentname, Int32 agentrevision)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#RegisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IClient.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#RegisterUser(System.String,System.String,System.String,System.String)">
            <summary>Sets the stub of IClient.RegisterUser(String username, String password, String fullname, String email)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#UnregisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IClient.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.LoginStringStringStringInt32">
            <summary>Sets the stub of IClient.Login(String username, String password, String agentname, Int32 agentrevision)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IClient.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.RegisterUserStringStringStringString">
            <summary>Sets the stub of IClient.RegisterUser(String username, String password, String fullname, String email)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.ServerNameGet">
            <summary>Sets the stub of IClient.get_ServerName()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.ServerPortGet">
            <summary>Sets the stub of IClient.get_ServerPort()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIClient.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IClient.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#ServerName">
            <summary>Sets the stub of IClient.get_ServerName()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIClient.dc::DevChallenge#IClient#ServerPort">
            <summary>Sets the stub of IClient.get_ServerPort()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubIConnection">
            <summary>Stub type of DevChallenge.IConnection</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.#ctor">
            <summary>Initializes a new instance of type StubIConnection</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.CreateNotificationXElement">
            <summary>Sets the stub of IConnection.CreateNotification(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.CreateRequestXElement">
            <summary>Sets the stub of IConnection.CreateRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.CreateResponseXElementString">
            <summary>Sets the stub of IConnection.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#CreateNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.CreateNotification(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#CreateRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.CreateRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#CreateResponse(System.Xml.Linq.XElement,System.String)">
            <summary>Sets the stub of IConnection.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#Exec">
            <summary>Sets the stub of IConnection.Exec()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#Exec(System.TimeSpan)">
            <summary>Sets the stub of IConnection.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#ExecWhile(System.Func{System.Boolean})">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#ExecWhile(System.Func{System.Boolean},System.TimeSpan)">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#GetNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#GetRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#GetResponse(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#PostRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.PostRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#RegisterFilter(System.Func{System.Xml.Linq.XElement,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#RegisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IConnection.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#RunUntilClosed">
            <summary>Sets the stub of IConnection.RunUntilClosed()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#SendNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.SendNotification(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#SendRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.SendRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#SendRequest(System.Xml.Linq.XElement,System.TimeSpan)">
            <summary>Sets the stub of IConnection.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#SendResponse(System.Xml.Linq.XElement,System.String)">
            <summary>Sets the stub of IConnection.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#UnregisterFilter(System.Func{System.Xml.Linq.XElement,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#UnregisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IConnection.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#WaitForNotification(System.Func{DevChallenge.INotification,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#WaitForNotification(System.Func{DevChallenge.INotification,DevChallenge.FilterResponse},System.TimeSpan)">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#WaitForRequest(System.Func{DevChallenge.IRequest,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.dc::DevChallenge#IConnection#WaitForRequest(System.Func{DevChallenge.IRequest,DevChallenge.FilterResponse},System.TimeSpan)">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.Exec">
            <summary>Sets the stub of IConnection.Exec()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.ExecTimeSpan">
            <summary>Sets the stub of IConnection.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.ExecWhileFuncOfBoolean">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.GetNotificationXElement">
            <summary>Sets the stub of IConnection.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.GetRequestXElement">
            <summary>Sets the stub of IConnection.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.GetResponseXElement">
            <summary>Sets the stub of IConnection.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.PostRequestXElement">
            <summary>Sets the stub of IConnection.PostRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.RegisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the stub of IConnection.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IConnection.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.RunUntilClosed">
            <summary>Sets the stub of IConnection.RunUntilClosed()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.SendNotificationXElement">
            <summary>Sets the stub of IConnection.SendNotification(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.SendRequestXElement">
            <summary>Sets the stub of IConnection.SendRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.SendRequestXElementTimeSpan">
            <summary>Sets the stub of IConnection.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.SendResponseXElementString">
            <summary>Sets the stub of IConnection.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIConnection.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.UnregisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the stub of IConnection.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IConnection.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.WaitForNotificationFuncOfINotificationFilterResponse">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.WaitForNotificationFuncOfINotificationFilterResponseTimeSpan">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.WaitForRequestFuncOfIRequestFilterResponse">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIConnection.WaitForRequestFuncOfIRequestFilterResponseTimeSpan">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubINotification">
            <summary>Stub type of DevChallenge.INotification</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubINotification.#ctor">
            <summary>Initializes a new instance of type StubINotification</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubINotification.MessageGet">
            <summary>Sets the stub of INotification.get_Message()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubINotification.SerializedGet">
            <summary>Sets the stub of INotification.get_Serialized()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubINotification.dc::DevChallenge#INotification#Message">
            <summary>Sets the stub of INotification.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubINotification.dc::DevChallenge#INotification#Serialized">
            <summary>Sets the stub of INotification.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubIRequest">
            <summary>Stub type of DevChallenge.IRequest</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIRequest.#ctor">
            <summary>Initializes a new instance of type StubIRequest</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIRequest.MessageGet">
            <summary>Sets the stub of IRequest.get_Message()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIRequest.RequestIdGet">
            <summary>Sets the stub of IRequest.get_RequestId()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIRequest.SerializedGet">
            <summary>Sets the stub of IRequest.get_Serialized()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIRequest.dc::DevChallenge#IRequest#Message">
            <summary>Sets the stub of IRequest.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIRequest.dc::DevChallenge#IRequest#RequestId">
            <summary>Sets the stub of IRequest.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIRequest.dc::DevChallenge#IRequest#Serialized">
            <summary>Sets the stub of IRequest.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubIResponse">
            <summary>Stub type of DevChallenge.IResponse</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubIResponse.#ctor">
            <summary>Initializes a new instance of type StubIResponse</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIResponse.MessageGet">
            <summary>Sets the stub of IResponse.get_Message()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIResponse.RequestIdGet">
            <summary>Sets the stub of IResponse.get_RequestId()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubIResponse.SerializedGet">
            <summary>Sets the stub of IResponse.get_Serialized()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIResponse.dc::DevChallenge#IResponse#Message">
            <summary>Sets the stub of IResponse.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIResponse.dc::DevChallenge#IResponse#RequestId">
            <summary>Sets the stub of IResponse.get_RequestId()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubIResponse.dc::DevChallenge#IResponse#Serialized">
            <summary>Sets the stub of IResponse.get_Serialized()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubITcpConnection">
            <summary>Stub type of DevChallenge.ITcpConnection</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.#ctor">
            <summary>Initializes a new instance of type StubITcpConnection</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.CreateNotificationXElement">
            <summary>Sets the stub of IConnection.CreateNotification(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.CreateRequestXElement">
            <summary>Sets the stub of IConnection.CreateRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.CreateResponseXElementString">
            <summary>Sets the stub of IConnection.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#CreateNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.CreateNotification(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#CreateRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.CreateRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#CreateResponse(System.Xml.Linq.XElement,System.String)">
            <summary>Sets the stub of IConnection.CreateResponse(XElement message, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#Exec">
            <summary>Sets the stub of IConnection.Exec()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#Exec(System.TimeSpan)">
            <summary>Sets the stub of IConnection.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#ExecWhile(System.Func{System.Boolean})">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#ExecWhile(System.Func{System.Boolean},System.TimeSpan)">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#GetNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#GetRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#GetResponse(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#PostRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.PostRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#RegisterFilter(System.Func{System.Xml.Linq.XElement,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#RegisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IConnection.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#RunUntilClosed">
            <summary>Sets the stub of IConnection.RunUntilClosed()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#SendNotification(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.SendNotification(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#SendRequest(System.Xml.Linq.XElement)">
            <summary>Sets the stub of IConnection.SendRequest(XElement message)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#SendRequest(System.Xml.Linq.XElement,System.TimeSpan)">
            <summary>Sets the stub of IConnection.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#SendResponse(System.Xml.Linq.XElement,System.String)">
            <summary>Sets the stub of IConnection.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#UnregisterFilter(System.Func{System.Xml.Linq.XElement,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#UnregisterMonitor(System.Action{System.Xml.Linq.XElement,DevChallenge.MessageDirection})">
            <summary>Sets the stub of IConnection.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#WaitForNotification(System.Func{DevChallenge.INotification,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#WaitForNotification(System.Func{DevChallenge.INotification,DevChallenge.FilterResponse},System.TimeSpan)">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#WaitForRequest(System.Func{DevChallenge.IRequest,DevChallenge.FilterResponse})">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#IConnection#WaitForRequest(System.Func{DevChallenge.IRequest,DevChallenge.FilterResponse},System.TimeSpan)">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.Exec">
            <summary>Sets the stub of IConnection.Exec()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.ExecTimeSpan">
            <summary>Sets the stub of IConnection.Exec(TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.ExecWhileFuncOfBoolean">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.ExecWhileFuncOfBooleanTimeSpan">
            <summary>Sets the stub of IConnection.ExecWhile(Func`1&lt;Boolean&gt; condition, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.GetNotificationXElement">
            <summary>Sets the stub of IConnection.GetNotification(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.GetRequestXElement">
            <summary>Sets the stub of IConnection.GetRequest(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.GetResponseXElement">
            <summary>Sets the stub of IConnection.GetResponse(XElement rawmsg)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.PostRequestXElement">
            <summary>Sets the stub of IConnection.PostRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.RegisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the stub of IConnection.RegisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.RegisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IConnection.RegisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.RunUntilClosed">
            <summary>Sets the stub of IConnection.RunUntilClosed()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.SendNotificationXElement">
            <summary>Sets the stub of IConnection.SendNotification(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.SendRequestXElement">
            <summary>Sets the stub of IConnection.SendRequest(XElement message)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.SendRequestXElementTimeSpan">
            <summary>Sets the stub of IConnection.SendRequest(XElement message, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.SendResponseXElementString">
            <summary>Sets the stub of IConnection.SendResponse(XElement response, String requestid)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubITcpConnection.global::System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.TcpClientGet">
            <summary>Sets the stub of ITcpConnection.get_TcpClient()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.UnregisterFilterFuncOfXElementFilterResponse">
            <summary>Sets the stub of IConnection.UnregisterFilter(Func`2&lt;XElement,FilterResponse&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.UnregisterMonitorActionOfXElementMessageDirection">
            <summary>Sets the stub of IConnection.UnregisterMonitor(Action`2&lt;XElement,MessageDirection&gt; me)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.WaitForNotificationFuncOfINotificationFilterResponse">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.WaitForNotificationFuncOfINotificationFilterResponseTimeSpan">
            <summary>Sets the stub of IConnection.WaitForNotification(Func`2&lt;INotification,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.WaitForRequestFuncOfIRequestFilterResponse">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubITcpConnection.WaitForRequestFuncOfIRequestFilterResponseTimeSpan">
            <summary>Sets the stub of IConnection.WaitForRequest(Func`2&lt;IRequest,FilterResponse&gt; filter, TimeSpan timeout)</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubITcpConnection.dc::DevChallenge#ITcpConnection#TcpClient">
            <summary>Sets the stub of ITcpConnection.get_TcpClient()</summary>
        </member>
        <member name="T:DevChallenge.Fakes.StubInvalidMessageTypeException">
            <summary>Stub type of DevChallenge.InvalidMessageTypeException</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubInvalidMessageTypeException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubInvalidMessageTypeException.Source as a property with a backing field.</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.InitializeStub">
            <summary>Initializes a new instance of type StubInvalidMessageTypeException</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:DevChallenge.Fakes.StubInvalidMessageTypeException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:DevChallenge.Fakes.StubInvalidMessageTypeException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="P:DevChallenge.Fakes.StubInvalidMessageTypeException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="T:DevChallenge.Util.Fakes.ShimAsyncQueue`1">
            <summary>Shim type of DevChallenge.Util.AsyncQueue`1</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.ShimAsyncQueue`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.ShimAsyncQueue`1.#ctor(DevChallenge.Util.AsyncQueue{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.ShimAsyncQueue`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.ShimAsyncQueue`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AddT0">
            <summary>Sets the shim of AsyncQueue`1.Add(!0 item)</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AsEnumerable">
            <summary>Sets the shim of AsyncQueue`1.AsEnumerable()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.Close">
            <summary>Sets the shim of AsyncQueue`1.Close()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.Constructor">
            <summary>Sets the shim of AsyncQueue`1.AsyncQueue`1()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.Pop">
            <summary>Sets the shim of AsyncQueue`1.Pop()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.PopTimeSpan">
            <summary>Sets the shim of AsyncQueue`1.Pop(TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances.AddT0">
            <summary>Sets the shim of AsyncQueue`1.Add(!0 item)</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances.AsEnumerable">
            <summary>Sets the shim of AsyncQueue`1.AsEnumerable()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances.Close">
            <summary>Sets the shim of AsyncQueue`1.Close()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances.Pop">
            <summary>Sets the shim of AsyncQueue`1.Pop()</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.ShimAsyncQueue`1.AllInstances.PopTimeSpan">
            <summary>Sets the shim of AsyncQueue`1.Pop(TimeSpan timeout)</summary>
        </member>
        <member name="T:DevChallenge.Util.Fakes.StubAsyncQueue`1">
            <summary>Stub type of DevChallenge.Util.AsyncQueue`1</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.StubAsyncQueue`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:DevChallenge.Util.Fakes.StubAsyncQueue`1.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncQueue</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.StubAsyncQueue`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.StubAsyncQueue`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:DevChallenge.Util.Fakes.StubAsyncQueue`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
